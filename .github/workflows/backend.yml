name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: portfolio_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up environment variables
      run: |
        cd backend
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env
        echo "DEBUG=True" >> .env
        echo "ENVIRONMENT=test" >> .env
        echo "USE_POSTGRES=True" >> .env
        echo "DB_NAME=portfolio_test" >> .env
        echo "DB_USER=postgres" >> .env
        echo "DB_PASSWORD=postgres" >> .env
        echo "DB_HOST=localhost" >> .env
        echo "DB_PORT=5432" >> .env
        echo "RESEND_API_KEY=test-key" >> .env
        
    - name: Run Django system checks
      run: |
        cd backend
        python manage.py check
        
    - name: Run migrations
      run: |
        cd backend
        python manage.py migrate
        
    - name: Run tests
      run: |
        cd backend
        python manage.py test
        
    - name: Check for security issues
      run: |
        cd backend
        python manage.py check --deploy

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        
    - name: Run flake8
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Check formatting with black
      run: |
        cd backend
        black --check .
        
    - name: Check import sorting
      run: |
        cd backend
        isort --check-only .