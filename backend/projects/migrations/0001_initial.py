# Generated by Django 5.0 on 2025-09-17 17:36

import cloudinary.models
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=250, unique=True)),
                ('tagline', models.CharField(help_text='One-liner description', max_length=300)),
                ('thumbnail', cloudinary.models.CloudinaryField(max_length=255, verbose_name='image')),
                ('github_url', models.URLField(blank=True)),
                ('live_demo_url', models.URLField(blank=True)),
                ('priority', models.IntegerField(default=0, help_text='Higher number = higher priority')),
                ('is_featured', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TechCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Tech Categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProjectDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problem_statement', models.TextField(help_text='Markdown supported')),
                ('solution_approach', models.TextField(help_text='Markdown supported')),
                ('technology_justification', models.TextField(help_text='Why these technologies? Markdown supported')),
                ('technical_architecture', cloudinary.models.CloudinaryField(blank=True, max_length=255, verbose_name='image')),
                ('key_features', models.JSONField(default=list, help_text='List of key features')),
                ('performance_metrics', models.JSONField(default=dict, help_text='Quantifiable results as key-value pairs')),
                ('challenges_solved', models.TextField(blank=True, help_text='Markdown supported')),
                ('demo_video_url', models.URLField(blank=True)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='details', to='projects.project')),
            ],
        ),
        migrations.CreateModel(
            name='Technology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('proficiency', models.IntegerField(choices=[(1, 'Beginner'), (2, 'Intermediate'), (3, 'Advanced'), (4, 'Expert'), (5, 'Master')])),
                ('icon_url', models.URLField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.techcategory')),
            ],
            options={
                'verbose_name_plural': 'Technologies',
                'ordering': ['category__order', '-proficiency', 'name'],
            },
        ),
        migrations.AddField(
            model_name='project',
            name='technologies',
            field=models.ManyToManyField(blank=True, to='projects.technology'),
        ),
    ]
